generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WhatsAppConnection {
  id                      String                   @id @default(uuid())
  name                    String
  isDefault               Boolean
  greetingMessage         String?
  conclusionMessage       String?
  outOfOfficeHoursMessage String?
  reviewMessage           String?
  token                   String?
  queueId                 String
  integrationId           String?
  userId                  String?
  promptId                String
  transferQueueId         String?
  timeToTransfer          String?
  expiresInactiveMessage  String?
  companyId               String?
  session                 String
  qrCode                  String
  status                  WhatsAppConnectionStatus @default(PENDING)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  user   User?
  prompt Prompts[]
  queues Queue[]
}

model User {
  id                   String   @id @default(uuid())
  name                 String
  email                String   @unique
  password             String
  role                 UserRole @default(ADMIN)
  isActive             Boolean  @default(true)
  whatsAppConnectionId String   @unique
  companyId            String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relacionamentos
  whatsAppConnection WhatsAppConnection @relation(fields: [whatsAppConnectionId], references: [id])

  conversations Conversation[]
  messages      Message[]
  queues        QueueUser[]

  @@map("users")
}

model Contact {
  id         String   @id @default(uuid())
  name       String
  phone      String   @unique
  email      String?
  tags       String[]
  whatsappId String?
  companyId  String?
  isCostumer Boolean? @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  conversations Conversation[]

  @@map("contacts")
}

model Queue {
  id                      String   @id @default(uuid())
  name                    String
  color                   String   @default("#3B82F6")
  greetingMessage         String?
  outOfOfficeHoursMessage String?
  promptId                String?
  integrationId           String?
  isActive                Boolean  @default(true)
  priority                Int      @default(0)
  schedules               Json[]   @default([])
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relacionamentos
  conversations        Conversation[]
  users                QueueUser[]
  quickResponses       QuickResponse[]
  prompts              Prompts[]
  whatsAppConnectionId String?
  whatsAppConnection   WhatsAppConnection? @relation(fields: [whatsAppConnectionId], references: [id], onDelete: SetNull)

  @@map("queues")
}

model QueueUser {
  id      String @id @default(uuid())
  userId  String
  queueId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  queue Queue @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@unique([userId, queueId])
  @@map("queue_users")
}

model Conversation {
  id            String             @id @default(uuid())
  contactId     String
  userId        String?
  queueId       String?
  tagId         String?
  status        ConversationStatus @default(WAITING)
  priority      Priority           @default(MEDIUM)
  subject       String?
  lastMessageAt DateTime?
  closedAt      DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relacionamentos
  contact  Contact   @relation(fields: [contactId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  queue    Queue?    @relation(fields: [queueId], references: [id])
  tag      Tags?     @relation(fields: [tagId], references: [id], onDelete: SetNull)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String        @id @default(uuid())
  conversationId String
  userId         String?
  content        String
  messageType    MessageType   @default(TEXT)
  direction      Direction
  whatsappId     String?       @unique
  status         MessageStatus @default(PENDING)
  mediaUrl       String?
  mediaType      String?
  isRead         Boolean       @default(false)
  readAt         DateTime?
  deliveredAt    DateTime?
  sentAt         DateTime?
  createdAt      DateTime      @default(now())

  // Relacionamentos
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id])

  @@map("messages")
}

model QuickResponse {
  id        String   @id @default(uuid())
  title     String
  message   String
  shortcut  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  queueId   String

  // Relacionamentos
  queue Queue? @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@map("quick_responses")
}

model Prompts {
  id               String   @id @default(uuid())
  title            String
  apiKey           String
  prompt           String
  maxTokens        Int
  maxMessages      Int
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  temperature      Float?
  assistantId      String?
  description      String?
  companyResume    String
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  queueId          String?

  // Relacionamentos
  queue                Queue?              @relation(fields: [queueId], references: [id], onDelete: SetNull)
  WhatsAppConnection   WhatsAppConnection? @relation(fields: [whatsAppConnectionId], references: [id])
  whatsAppConnectionId String?

  @@map("prompts")
}

model Tags {
  id            String         @id @default(uuid())
  title         String
  color         String
  order         Int            @default(0)
  description   String?
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("tags")
}

enum UserRole {
  ADMIN
  USER
}

enum WhatsAppConnectionStatus {
  OPEN
  PENDING
  CLOSED
}

enum ConversationStatus {
  WAITING
  SERVING
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  LOCATION
  CONTACT
}

enum Direction {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}
