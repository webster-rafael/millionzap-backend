generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             String          @id @default(uuid())
  name           String
  phone          String
  email          String          @unique
  password       String
  status         Boolean
  planId         String
  dueDate        DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  users          User[]
  contacts       Contact[]
  conversations  Conversation[]
  messages       Message[]
  queues         Queue[]
  quickResponses QuickResponse[]
  prompts        Prompts[]
  tags           Tags[]
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          UserRole       @default(ADMIN)
  isActive      Boolean        @default(true)
  companyId     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  company       Company?       @relation(fields: [companyId], references: [id])
  // Relacionamentos
  conversations Conversation[]
  messages      Message[]
  queues        QueueUser[]

  @@map("users")
}

model Contact {
  id         String    @id @default(uuid())
  name       String
  phone      String    @unique
  email      String?
  tags       String[]
  companyId  String
  isCostumer Boolean?  @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  // Relacionamentos
  conversations Conversation[]
  Company       Company?       @relation(fields: [companyId], references: [id])

  @@map("contacts")
}

model Queue {
  id                      String   @id @default(uuid())
  name                    String
  color                   String   @default("#3B82F6")
  greetingMessage         String?
  outOfOfficeHoursMessage String?
  promptId                String?
  integrationId           String?
  isActive                Boolean  @default(true)
  priority                Int      @default(0)
  schedules               Json[]   @default([])
  companyId               String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relacionamentos
  conversations  Conversation[]
  users          QueueUser[]
  quickResponses QuickResponse[]
  prompts        Prompts[]
  Company        Company?        @relation(fields: [companyId], references: [id])

  @@map("queues")
}

model QueueUser {
  id      String @id @default(uuid())
  userId  String
  queueId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  queue Queue @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@unique([userId, queueId])
  @@map("queue_users")
}

model Conversation {
  id            String             @id @default(uuid())
  contactId     String
  userId        String?
  queueId       String?
  tagId         String?
  status        ConversationStatus @default(WAITING)
  priority      Priority?          @default(MEDIUM)
  subject       String?
  lastMessageAt DateTime?
  closedAt      DateTime?
  companyId     String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime?          @updatedAt

  // Relacionamentos
  user     User?     @relation(fields: [userId], references: [id])
  queue    Queue?    @relation(fields: [queueId], references: [id])
  tag      Tags?     @relation(fields: [tagId], references: [id], onDelete: SetNull)
  messages Message[]
  contact  Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Company  Company?  @relation(fields: [companyId], references: [id])

  @@map("conversations")
}

model Message {
  id             String        @id @default(uuid())
  conversationId String
  userId         String?
  content        String
  messageType    String
  direction      Direction
  status         MessageStatus @default(PENDING)
  mediaUrl       String?
  timestamp      String
  mediaType      String?
  companyId      String
  isRead         Boolean       @default(false)
  createdAt      DateTime      @default(now())

  // Relacionamentos
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id])
  Company      Company?     @relation(fields: [companyId], references: [id])

  @@map("messages")
}

model QuickResponse {
  id        String   @id @default(uuid())
  title     String
  message   String
  shortcut  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  queueId   String
  companyId String

  // Relacionamentos
  queue   Queue?   @relation(fields: [queueId], references: [id], onDelete: Cascade)
  Company Company? @relation(fields: [companyId], references: [id])

  @@map("quick_responses")
}

model Prompts {
  id               String   @id @default(uuid())
  title            String
  apiKey           String
  prompt           String
  maxTokens        Int
  maxMessages      Int
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  temperature      Float?
  assistantId      String?
  description      String?
  companyResume    String
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  queueId          String?
  companyId        String

  // Relacionamentos
  queue   Queue?   @relation(fields: [queueId], references: [id], onDelete: SetNull)
  Company Company? @relation(fields: [companyId], references: [id])

  @@map("prompts")
}

model Tags {
  id            String         @id @default(uuid())
  title         String
  color         String
  order         Int            @default(0)
  description   String?
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Company       Company?       @relation(fields: [companyId], references: [id])
  companyId     String

  @@map("tags")
}

enum UserRole {
  ADMIN
  USER
}

enum ConversationStatus {
  OPEN
  PENDING
  WAITING
  SERVING
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Direction {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  RECEIVED
}
